const mongoose = require('mongoose');
require('../config/mongoConfig'); // üîπ Importiamo la configurazione di MongoDB
const Session = require('../models/sessionModel');
const logger = require('../utils/logger');

/**
 * Validate a new scan request and create the session in MongoDB.
 * @param {string} userId   ‚Äì MongoDB ObjectId dell'utente che richiede la scansione
 * @param {string} targetUrl ‚Äì URL da scansionare
 * @returns {string} sessionId appena creato
 */
exports.validateAndEnqueueScan = async (userId, targetUrl) => {
  try {
    // 1Ô∏è‚É£ Assicuriamoci che MongoDB sia connesso prima di continuare
    if (mongoose.connection.readyState !== 1) {
      logger.warn('‚è≥ Connessione a MongoDB non pronta. Aspetto...');
      await mongoose.connection.asPromise();
      logger.info('‚úÖ Connessione a MongoDB stabilita.');
    }

    // 2Ô∏è‚É£ Verifica formato dell'ObjectId utente
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      throw new Error('Invalid user ID format');
    }

    // 3Ô∏è‚É£ Valida il formato dell'URL
    const urlRegex = /^(https?:\/\/)?([\w-]+(\.[\w-]+)+)(:\d+)?(\/[^\s]*)?$/;
    if (!urlRegex.test(targetUrl)) {
      throw new Error('Invalid URL format');
    }

    // 4Ô∏è‚É£ Genera un identificativo univoco di sessione
    const sessionId = `session-${Date.now()}-${Math.floor(Math.random() * 1000)}`;

    // 5Ô∏è‚É£ Salva lo stato iniziale in MongoDB
    const session = new Session({
      user: new mongoose.Types.ObjectId(userId),
      sessionId,
      targetUrl,
      status: 'pending',
    });

    await session.save();
    logger.info(`‚úÖ Session created: ${sessionId} for user ${userId}`);

    // 6Ô∏è‚É£ Restituisce l'ID della sessione; nessuna operazione su Redis
    return sessionId;
  } catch (error) {
    logger.error(`‚ùå Error in validateAndEnqueueScan: ${error.message}`);
    throw new Error('Failed to validate scan');
  }
};
